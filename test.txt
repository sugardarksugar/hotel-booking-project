try {
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ["card"],
      mode: "payment",

      line_items: req.body.items.map((item: any) => {
        const storeItem = storeItems.get(item.id);
        return {
          price_data: {
            currency: "HKD",
            product_data: {
              name: storeItem?.name,
            },
            unit_amount: storeItem?.priceInCents,
          },
          quantity: quantity,
        };
      }),
      success_url: `http://localhost:8080/success.html`,
      cancel_url: `http://localhost:8080/cancel.html`,
    });
    res.json({ url: session.url });
  } catch (err) {
    res.status(500);
    if (err instanceof Error) {
      console.log(err.message);
    } else {
      console.log("Unexpected error", err);
    }
  }
});





postRouter.post("/create-checkout-session", async (req, res) => {
  let { id, quantity } = req.body;
  const storeItems = await client.query(
    `select * from hotel where hotel_id = $1`,
    [id]
  );
  console.log(storeItems);

  try {
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ["card"],
      mode: "payment",
      price_data: {
        currency: "HKD",
        product_data: {
          name: storeItems[0].hotel_name,
        },
        unit_amount: storeItems[0].price,
      },
      quantity: quantity,

      success_url: `http://localhost:8080/success.html`,
      cancel_url: `http://localhost:8080/cancel.html`,
    });
    res.json({ url: session.url });
  } catch (err) {
    res.status(500);
    if (err instanceof Error) {
      console.log(err.message);
    } else {
      console.log("Unexpected error", err);
    }
  }
});


 /*
    [
      {star: 2, count: 4}, // 0
      {star: 3, count: 40}, //1
      {star: 5, count: 3} //2
    ]
    */

    let starObj = {};
    /*
    {
      1: 0,
      2; 4,
      3: 40
      4: 0,
      5: 3
    }
    */